Задание:
1. Провести анализ своего проекта на использование антипаттернов.  Какие антипаттерны удалось обнаружить?
2. Продумать методы устранения.

Ответ:
Мной были найдены следующие антипаттерны:
1. Слепая вера.
В файле «views.py» функция «def contact_view()» получаем данные от пользователя и никаким образом их не валидируем.
К тому же данные из «request» получаем по ключу «data = request['data']». Таким образом, при отсутствии ключа получим
исключение «KeyError».

Вариант решения: Проверять, что необходимые данные присутствуют и эти данные представлены строками. Также получать
данные не по ключу, а используя метод словаря «get()», который при отсутствии ключа не бросает исключение,
а возвращает None.

2. Обработка ошибок через if.
В файле «models.py» в классе «TrainingSite» в функции «def find_category_by_id()» лучше использовать конструкцию
try-except, что семантически более правильно.

Вариант решения:
Обернуть код в конструкцию try-except.

2. Спагетти код.
В файле «views.py» функция «def contact_view()» вызывается функция «site.find_category_by_id(int(category_id))»,
которая получает категорию из «self.categories». И неочевидно, откуда там категории появляются. Это на мой взгляд.

Вариант решения:
Сохранять категории в БД и получать их оттуда же.
(Понятно, что мы там сохраняли в учебных целях и не использовали БД).
